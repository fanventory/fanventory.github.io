

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://fanventory.github.io/</id>
  <title>Fanventory</title>
  <subtitle>有空的时候随便写点东西.</subtitle>
  <updated>2023-07-26T20:16:59+08:00</updated>
  <author>
    <name>Fanventory</name>
    <uri>https://fanventory.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://fanventory.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://fanventory.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 Fanventory </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>刷题笔记 ——  通配符匹配</title>
    <link href="https://fanventory.github.io/posts/%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D/" rel="alternate" type="text/html" title="刷题笔记 ——  通配符匹配" />
    <published>2023-07-25T14:26:00+08:00</published>
  
    <updated>2023-07-25T14:26:00+08:00</updated>
  
    <id>https://fanventory.github.io/posts/%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D/</id>
    <content src="https://fanventory.github.io/posts/%E9%80%9A%E9%85%8D%E7%AC%A6%E5%8C%B9%E9%85%8D/" />
    <author>
      <name>Fanventory</name>
    </author>

  
    
    <category term="leetcode" />
    
  

  
    <summary>
      





      Dynamic Programming/Finite State Machine

  该题和正则表达式匹配的题目很类似，区别在于正则表达式的通配符*是两个字符，而该题的通配符*只需要一个字符就能完成容易匹配，所以该题在递归匹配时分支过多，导致超时。另外该题可以转换为字符串匹配问题，用有限状态机进行优化。





题目
给你一个输入字符串 (s) 和一个字符模式 (p) ，请你实现一个支持 ‘?’ 和 ‘’ 匹配规则的通配符匹配：
‘?’ 可以匹配任何单个字符。
‘’ 可以匹配任意字符序列（包括空字符序列）。
判定匹配成功的充要条件是：字符模式必须能够 完全匹配 输入字符串（而不是部分匹配）。

例子

示例1

输入：s = "aa", p = "a"
输出：false
解释："a" 无法匹配 "aa" 整个字符串。


示例2

输入：s = "aa", p = "*"
输出：...
    </summary>
  

  </entry>

  
  <entry>
    <title>刷题笔记 ——  单词接龙 II</title>
    <link href="https://fanventory.github.io/posts/%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/" rel="alternate" type="text/html" title="刷题笔记 ——  单词接龙 II" />
    <published>2023-07-24T16:52:00+08:00</published>
  
    <updated>2023-07-24T16:52:00+08:00</updated>
  
    <id>https://fanventory.github.io/posts/%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/</id>
    <content src="https://fanventory.github.io/posts/%E5%8D%95%E8%AF%8D%E6%8E%A5%E9%BE%99/" />
    <author>
      <name>Fanventory</name>
    </author>

  
    
    <category term="leetcode" />
    
  

  
    <summary>
      





      BFS/DFS

  该题是判断给定的简单正则表达式能否匹配字符串，难点在于匹配过程存在很多情况。





题目
按字典 wordList 完成从单词 beginWord 到单词 endWord 转化，一个表示此过程的 转换序列 是形式上像 beginWord -&amp;gt; s1 -&amp;gt; s2 -&amp;gt; … -&amp;gt; sk 这样的单词序列，并满足：

每对相邻的单词之间仅有单个字母不同。
转换过程中的每个单词 si（1 &amp;lt;= i &amp;lt;= k）必须是字典 wordList 中的单词。注意，beginWord 不必是字典 wordList 中的单词。
sk == endWord
给你两个单词 beginWord 和 endWord ，以及一个字典 wordList 。请你找出并返回所有从 beginWord 到 endWord 的 最短转换序列 ，如果不存在这样的转换序...
    </summary>
  

  </entry>

  
  <entry>
    <title>刷题笔记 ——  正则表达式匹配</title>
    <link href="https://fanventory.github.io/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/" rel="alternate" type="text/html" title="刷题笔记 ——  正则表达式匹配" />
    <published>2023-07-24T15:32:00+08:00</published>
  
    <updated>2023-07-24T15:32:00+08:00</updated>
  
    <id>https://fanventory.github.io/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</id>
    <content src="https://fanventory.github.io/posts/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/" />
    <author>
      <name>Fanventory</name>
    </author>

  
    
    <category term="leetcode" />
    
  

  
    <summary>
      





      Dynamic Programming/Recursion

  该题是判断给定的简单正则表达式能否匹配字符串，难点在于匹配过程存在很多情况。





题目
请实现一个函数用来匹配包含’. ‘和’*‘的正则表达式。模式中的字符’.’表示任意一个字符，而’*‘表示它前面的字符可以出现任意次（含0次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab*ac*a”匹配，但与”aa.a”和”ab*a”均不匹配。

例子

示例1

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。


示例2

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 '...
    </summary>
  

  </entry>

  
  <entry>
    <title>读书笔记 —— gdb调试</title>
    <link href="https://fanventory.github.io/posts/gdb%E8%B0%83%E8%AF%95/" rel="alternate" type="text/html" title="读书笔记 —— gdb调试" />
    <published>2023-07-24T11:12:00+08:00</published>
  
    <updated>2023-07-24T11:12:00+08:00</updated>
  
    <id>https://fanventory.github.io/posts/gdb%E8%B0%83%E8%AF%95/</id>
    <content src="https://fanventory.github.io/posts/gdb%E8%B0%83%E8%AF%95/" />
    <author>
      <name>Fanventory</name>
    </author>

  
    
    <category term="Reading Notes" />
    
    <category term="Linux高性能服务器编程" />
    
  

  
    <summary>
      





      gdb

  本节总结了一些常用的gdb调试命令，展示了如何调试多进程程序和多线程程序。





常用的gdb命令


  显示函数


(gdb)info functions


支持正则匹配

(gdb)info functions func*



  进入函数


step：会进入函数内部
next：不进入函数，等待函数执行完，显示下一行函数代码


  退出函数


finish：继续执行函数中剩余代码，打印返回值，显示下一行代码。
return：不继续执行函数中剩余代码，而是直接返回。可以直接使用return expression来更改设置返回值。


  直接执行函数


可以直接使用call或者print直接调用函数。


  打印函数堆栈帧信息


(gdb) info frame


  选择函数堆栈帧


(gdb) bt
#0  func1 (a=10) a...
    </summary>
  

  </entry>

  
  <entry>
    <title>读书笔记 —— 调整内核参数</title>
    <link href="https://fanventory.github.io/posts/%E8%B0%83%E6%95%B4%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0/" rel="alternate" type="text/html" title="读书笔记 —— 调整内核参数" />
    <published>2023-07-24T09:34:00+08:00</published>
  
    <updated>2023-07-24T09:34:00+08:00</updated>
  
    <id>https://fanventory.github.io/posts/%E8%B0%83%E6%95%B4%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0/</id>
    <content src="https://fanventory.github.io/posts/%E8%B0%83%E6%95%B4%E5%86%85%E6%A0%B8%E5%8F%82%E6%95%B0/" />
    <author>
      <name>Fanventory</name>
    </author>

  
    
    <category term="Reading Notes" />
    
    <category term="Linux高性能服务器编程" />
    
  

  
    <summary>
      





      调整内核参数

  本节探讨了Linux系统内核参数，这些内核参数都位于/proc/sys文件系统中。通常一个配置文件对应一个内核参数，文件名是参数的名称，文件内存是参数的值。我们可以通过修改文件内容或通过sysctl命令来修改内核参数。我们介绍了几个和服务器程序相关的内核参数。





内核参数

几乎所有的内核模块，包括内核核心模块和驱动程序，都在/proc/sys文件系统下提供了某些配置文件以供用户调整模块的属性和行为。通常一个配置文件对应一个内核参数，文件名是参数的名称，文件内存是参数的值。
我们也可以通过sysctl -a查看所有内核参数。

/proc/sys/fs目录下的部分文件

/proc/sys/fs目录下的内核参数都与文件系统相关。对于服务器程序，最重要的是以下两个参数：


  /proc/sys/fs/file-max


系统级文件描述符数量的限制。
一...
    </summary>
  

  </entry>

</feed>


